#!/bin/bash

mount -o remount,size=1G /run/archiso/cowspace

if [ "$#" -ne 1 ]
then
    pacman --noconfirm -Sy tmux
    tmux new-session -d -s install
    tmux send-keys -t install "${0} install" 'C-m'
fi

if  [ "$1" == "install" ]
then
    # setup ssh
    pacman --noconfirm -S openssh sshpass parted
    echo root:{{root_password}} | chpasswd
    systemctl start sshd
    
    # parse kernel args for install options
    for param in $(< /proc/cmdline); do 
        [[ "${param%%=*}" = "partition_plan" ]] && plan="${param#*=}"
    done

    # various partition plans
    {% for plan in partition_plans %}
    
    {% if loop.first %}
    if [[ "$plan" = {{ plan }} ]]
    {% else %}
    elif [[ "$plan" = {{ plan }} ]]
    {% endif %}
    then
{% for device in partition_plans[plan] %}
{% for partition in partition_plans[plan][device] %}
echo "d
{{partition.number}}
w
"|fdisk /dev/{{device}}
echo "n
{{partition.type}}
{{partition.number}}

{{partition.lsector}}
{% if partition.bootable -%}
a
{% if not loop.first -%}
{{partition.number}}
{% endif -%}
{% endif -%}
t
{% if not loop.first -%}
{{partition.number}}
{% endif -%}
{{partition.typehex}}
w
"|fdisk /dev/{{device}}
sleep 2
partprobe /dev/{{device}}
{% if partition.mkfs == "swap" -%}
mkswap -L swap /dev/{{device}}{{partition.number}}
sleep 1
swapon -L swap
{% else -%}
echo "y"|mkfs.{{partition.mkfs}} -L {{partition.label}} /dev/{{device}}{{partition.number}}
sleep 1
{% if partition.mount -%}
mount -t {{partition.mkfs}} /dev/{{device}}{{partition.number}} /mnt{{partition.mount}} 
{% endif %}
{% endif -%}
{% if partition.bootable -%}
BOOT_PART="{{device}}{{partition.number}}"
{% endif -%}
{% endfor -%}
{% endfor -%}
    else 
{% endfor -%}
        echo -e 'You`ve booted into the interactive (partition) mode.\n\n
            * Do your specific partitioning using [c]fdisk 
            * create filesystems e.g.  using mkfs.ext4 -L label -O "^64bit" /dev/sdXn 
            * set the booting device variable for syslinux in the /tmp/bootdev file: echo "BOOT_PART=/dev/sdXn" >> /tmp/bootdev
            * mount the root partition with "mount /dev/sdXn /mnt"
            * exit the shell with crtl+d\n 
            The installation will proceed then..\n'
            bash -c "exec zsh"
            source /tmp/bootdev
            echo -e '\n Exit interavtive mode proceeding with automatic installation..\n'
    fi
    cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
    grep -E -A 1 '.*Germany.*$' /etc/pacman.d/mirrorlist.bak | sed '/--/d' > /etc/pacman.d/mirrorlist
    pacman -Sy 
    pacstrap /mnt base base-devel networkmanager git python ansible
    genfstab -Lp /mnt > /mnt/etc/fstab
    function archchroot {
        arch-chroot /mnt /bin/bash -c "$1"
    }
    # build linux kernel
    archchroot "pacman -Sy"
    archchroot "mkinitcpio -p linux"
    
    # install syslinux bootloader
    archchroot "pacman --noconfirm -S syslinux"
    sed -i "s|/dev/sda3|$BOOT_PART|g" /mnt/boot/syslinux/syslinux.cfg
    syslinux-install_update -i -a -m -c /mnt/

    # set hostname
    ip=$(ip -o -f inet addr|awk '{print $4}'|cut -f1 -d '/'|sed 's/127.0.0.1//g'|tr -d '\n')
    hostname=$(nslookup "$ip" {{dnsserver['ip']}}|awk -F= '{print $2}'|tr -d '\n'|tr -d ' ')
    hostname=${hostname%?}
    shortname=$(echo "$hostname"|cut -d '.' -f1)
    echo "$ip    $hostname  $shortname" >> /mnt/etc/hosts
    echo "$shortname" > /mnt/etc/hostname

    # set us locale
    sed -i 's/#en_US/en_US/g' /mnt/etc/locale.gen
    archchroot "locale-gen"
    
    # set root password
    archchroot "echo root:{{root_password}}| chpasswd"
    
    # configure ansible
    mkdir -p /mnt/etc/ansible/group_vars
    echo 'ansible_python_interpreter: /usr/bin/python2' >> /mnt/etc/ansible/group_vars/all
    mkdir /mnt/var/lib/ansible
    if [ "{{ansible_repo['url']}}" != "setmet" ]; then
echo -e "[Unit]
Description=run ansible-pull on startup
After=network.target

[Service]
Type=oneshot
User=root
ExecStart=/bin/bash -c '/usr/bin/ansible-pull -d /var/lib/ansible -U {{ansible_repo['url']}} -C {{ansible_repo['branch']}} >> /var/log/ansible-pull.log 2>&1'

[Install]
WantedBy=multi-user.target
" >> /mnt/etc/systemd/system/ansible_pull.service
    archchroot "systemctl enable ansible_pull.service"
    fi
    
    # enable network manager
    archchroot "systemctl enable NetworkManager"

    reboot
fi


